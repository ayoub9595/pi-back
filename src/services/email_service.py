import logging
from flask_mail import Message
from flask import render_template
from src import mail
from datetime import datetime


class EmailService:
    @staticmethod
    def envoyer_email_affectation(affectation, recipient_email=None, action="creation"):
        try:
            utilisateur = affectation.get("utilisateur", {})
            equipement = affectation.get("equipement", {})
            caracteristiques = equipement.get("caracteristiques", [])

            recipient = recipient_email or utilisateur.get("email")
            if not recipient:
                logging.warning("Adresse email destinataire manquante, email non envoy√©")
                return

            html_content = render_template(
                "email_affectation.html",
                utilisateur=utilisateur,
                equipement=equipement,
                caracteristiques=caracteristiques,
                date_debut=affectation.get("date_debut"),
                date_fin=affectation.get("date_fin"),
                determine=affectation.get("determine"),
                action=action
            )
            if action == "creation":
                subject = "Nouvelle Affectation d'√âquipement"
            elif action == "suppression":
                subject = "Suppression d'une Affectation"
            elif action == "modification":
                subject = "Modification d'une Affectation"
            else:
                subject = "Notification d'Affectation"

            msg = Message(
                subject=subject,
                recipients=[recipient],
                html=html_content
            )
            mail.send(msg)
            logging.info(f"Email '{action}' envoy√© √† {recipient}")

        except Exception as e:
            logging.error(f"Erreur lors de l'envoi de l'email ({action}) : {str(e)}")

    @staticmethod
    def envoyer_email_reclamation_pour_admins(reclamation, recipient_email, action="creation"):
        try:
            if not recipient_email:
                logging.warning("Adresse email destinataire manquante, email non envoy√©")
                return

            utilisateur = reclamation.get("utilisateur", {})
            equipement = reclamation.get("equipement", {})
            caracteristiques = equipement.get("caracteristiques", [])

            current_date = datetime.now().strftime("%d/%m/%Y √† %H:%M")

            html_content = render_template(
                "email_reclamation_admins.html",
                reclamation=reclamation,
                utilisateur=utilisateur,
                equipement=equipement,
                caracteristiques=caracteristiques,
                action=action,
                current_date=current_date
            )

            if action == "creation":
                subject = "Nouvelle R√©clamation √† Traiter"
            elif action == "update":
                subject = "Mise √† Jour d'une R√©clamation"
            elif action == "resolved":
                subject = "R√©clamation R√©solue"
            else:
                subject = "Notification de R√©clamation"

            msg = Message(
                subject=subject,
                recipients=[recipient_email],
                html=html_content
            )
            mail.send(msg)
            logging.info(f"Email de r√©clamation '{action}' envoy√© √† {recipient_email}")

        except Exception as e:
            logging.error(f"Erreur lors de l'envoi de l'email de r√©clamation ({action}) : {str(e)}")

    @staticmethod
    def envoyer_email_reclamation_pour_utilisateur(reclamation, recipient_email, action="creation"):
        try:
            if not recipient_email:
                logging.warning("Adresse email destinataire manquante, email non envoy√©")
                return

            utilisateur = reclamation.get("utilisateur", {})
            equipement = reclamation.get("equipement", {})
            caracteristiques = equipement.get("caracteristiques", [])

            current_date = datetime.now().strftime("%d/%m/%Y √† %H:%M")

            html_content = render_template(
                "email_reclamation_users.html",
                reclamation=reclamation,
                utilisateur=utilisateur,
                equipement=equipement,
                caracteristiques=caracteristiques,
                action=action,
                current_date=current_date
            )

            if action == "creation":
                subject = "‚úÖ R√©clamation Enregistr√©e - Confirmation"
            elif action == "update":
                subject = "üìù Mise √† Jour de votre R√©clamation"
            elif action == "resolved":
                subject = "‚úÖ Votre R√©clamation a √©t√© R√©solue"
            elif action == "accepted":
                subject = "‚úÖ Votre R√©clamation a √©t√© Accept√©e"
            elif action == "rejected":
                subject = "‚ùå Mise √† Jour de votre R√©clamation"
            else:
                subject = "üì¨ Notification concernant votre R√©clamation"

            msg = Message(
                subject=subject,
                recipients=[recipient_email],
                html=html_content
            )
            mail.send(msg)
            logging.info(f"Email de confirmation de r√©clamation '{action}' envoy√© √† {recipient_email}")

        except Exception as e:
            logging.error(f"Erreur lors de l'envoi de l'email de confirmation de r√©clamation ({action}) : {str(e)}")